{"version":3,"sources":["components/InputField.tsx","components/Controls.tsx","components/Result.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["style","width","fontSize","border","overflow","outline","resize","borderStyle","fact","trim","InputField","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initState","content","lines","state","onChange","bind","assertThisInitialized","_this2","_this$state","react_default","a","createElement","value","onBlur","_","onEntry","placeholder","autoFocus","rows","Math","max","event","target","split","length","console","log","setState","Component","buttonStyle","background","borderBottom","marginLeft","marginRight","cursor","Controlls","run","stepOver","stepIn","stepBack","canRun","canStepOver","canStepIn","canGoBack","onClick","disabled","Result","tree","printer","BasicPrinter","print","inputStyle","margin","marginTop","padding","resultStyle","App","ast","steps","previousReduction","controlProps","className","InputField_InputField","_this$state2","normal","NormalEvaluator","nextReduction","None","perform","expression","tokens","tokenize","lambdaLetters","singleLetterVars","parse","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.861825d6.chunk.js","sourcesContent":["import React, { Component, ChangeEvent } from 'react'\n\n\ninterface InputProps {\n  onEntry (expression : string) : void,\n}\n\ninterface State {\n  content : string,\n  lines : number,\n}\n\nconst style = {\n  width: '100%',\n  fontSize: '3em',\n  border: 'none',\n  overflow: 'auto',\n  outline: 'none',\n  resize: 'none' as any,\n  borderStyle: 'none',\n}\n\nconst fact : string = `\n(λ n .\n  (Y (λ f n a .\n    IF (<= n 1)\n      a\n      (f (- n 1) (* n a))\n  )) (- n 1) (n)\n) 5\n`.trim()\n\nexport default class InputField extends Component<InputProps, State> {\n  constructor (props : InputProps) {\n    super(props)\n\n    const initState : State = {\n      content : fact, // ''\n      lines: 7, // 1\n    }\n\n    this.state = initState\n\n    this.onChange = this.onChange.bind(this)\n  }\n\n  getExpressionFromURL () : string {\n    // TODO: implement\n    return ''\n  }\n\n  render () {\n    const { content, lines } : State = this.state\n    return (\n      <textarea\n        style={ style }\n        onChange={ this.onChange }\n        value={ content }\n        onBlur={ _ => this.props.onEntry(this.state.content) }\n        placeholder='(λ f . (λ x . f (x x)) (λ x . f (x x)))'\n        autoFocus\n        rows={ Math.max(lines + 1, 2) }\n      />\n    )\n  }\n\n  onChange (event : ChangeEvent<HTMLTextAreaElement>) {\n    const { target : { value : content } } : { target : { value : string } } = event\n    const lines : number = content.split('\\n').length\n\n    console.log(\"lines \", lines)\n\n    this.setState({ content, lines })\n  }\n}\n","import React, { FunctionComponent, } from 'react'\n\n\nexport interface ControlProps {\n  run () : void,\n  stepOver () : void,\n  stepIn () : void,\n  stepBack () : void,\n  canRun : boolean,\n  canStepOver : boolean,\n  canStepIn : boolean,\n  canGoBack : boolean,\n}\n\nconst buttonStyle = {\n  fontSize: '1.5em',\n  background: 'none',\n  borderStyle: 'none',\n\tborderBottom: '2px solid navy',\n  marginLeft: '5px',\n  marginRight: '5px',  \n  cursor: 'pointer',\n  outline: 'none',\n}\n\nexport default function Controlls (props : ControlProps) : JSX.Element {\n  const {\n    run,\n    stepOver,\n    stepIn,\n    stepBack,\n    canRun,\n    canStepOver,\n    canStepIn,\n    canGoBack,\n  } : ControlProps = props\n  \n  return (\n    <div>\n      <button style={ buttonStyle } onClick={ run } disabled={ ! canRun } >RUN</button>\n      <button style={ buttonStyle } onClick={ stepOver } disabled={ ! canStepOver }>STEP OVER</button>\n      <button style={ buttonStyle } onClick={ stepIn } disabled={ ! canStepIn}>STEP IN</button>\n      <button style={ buttonStyle } onClick={ stepBack } disabled={ !canGoBack }>GO BACK</button>\n    </div>\n  )\n}","import React, { Component } from 'react'\nimport { AST, BasicPrinter } from 'lambdulus-core';\n\n\nconst style = {\n  fontSize: '2em',\n\n}\n\nexport default function Result (props : { tree : AST | null }) : JSX.Element | null {\n  const { tree } = props\n\n  if (tree === null) {\n    return null\n  }\n\n  const printer : BasicPrinter = new BasicPrinter(tree)\n\n  return (\n    <span style={ style } >\n      { printer.print() }\n    </span>\n  )\n}","import React, { Component } from 'react';\nimport { AST, tokenize, parse, ASTReduction, Token, NormalEvaluator, None } from 'lambdulus-core'\n\n\nimport InputField, { } from './components/InputField'\nimport Controls, { ControlProps } from './components/Controls'\nimport Result from './components/Result'\n\n// import logo from './logo.svg';\n// import './App.css';\n\ninterface state {\n  ast : AST | null,\n  steps : number,\n  previousReduction : ASTReduction | null,\n\n}\n\nconst inputStyle = {\n  margin: 'auto',\n  marginTop: '5vh',\n  width: '80%',\n  borderBottom: '2px solid gray',\n  padding: '10px',\n}\n\nconst resultStyle = {\n  margin: 'auto',\n  width: '80%',\n  marginTop: '2vh'\n}\n\nclass App extends Component<any, state> {\n  constructor (props : object) {\n    super(props)\n\n    this.state = {\n      ast : null,\n      steps : 0,\n      previousReduction : null\n    }\n\n    this.run = this.run.bind(this)\n    this.stepOver = this.stepOver.bind(this)\n    this.stepIn = this.stepIn.bind(this)\n    this.stepBack = this.stepBack.bind(this)\n    this.onEntry = this.onEntry.bind(this)\n  }\n\n  render() {\n    const controlProps : ControlProps = {\n      run : this.run,\n      stepOver : this.stepOver,\n      stepIn : this.stepIn,\n      stepBack : this.stepBack,\n      canRun : true,\n      canStepOver : true,\n      canStepIn : true,\n      canGoBack : true,\n    }\n\n    const { ast, steps } = this.state\n\n    return (\n      <div className=\"App\">\n        <div style={ inputStyle }>\n        <InputField onEntry={ this.onEntry } />\n        <br />\n        <Controls { ...controlProps } />\n        <br />\n        Steps: { steps }\n        <br />\n        <br />\n        </div>\n        <div style={ resultStyle }>\n          <Result tree={ ast } />\n        </div>\n      </div>\n    );\n  }\n\n  run () {\n    // (Y (λ f n . (<= n 1) 1 (* n (f (- n 1))) ) 3)\n    let { ast, steps } = this.state\n    if (ast === null) {\n      return\n    }\n\n    while (true) {\n      const normal : NormalEvaluator = new NormalEvaluator(ast)\n    \n      if (normal.nextReduction instanceof None) {\n        break\n      }\n    \n      ast = normal.perform() // perform next reduction\n      steps++\n    }\n\n\n    this.setState({ ast, steps })\n  }\n\n  stepOver () {\n\n  }\n\n  stepIn () {\n\n  }\n\n  stepBack () {\n\n  }\n\n  onEntry (expression : string) {\n    const tokens : Array<Token> = tokenize(expression, { lambdaLetters : ['λ', '~'], singleLetterVars : false })\n    const ast : AST = parse(tokens)\n\n    this.setState({ ast, steps : 0, previousReduction : null })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}